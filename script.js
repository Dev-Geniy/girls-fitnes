document.addEventListener("DOMContentLoaded", () => {
    const today = new Date();
    document.getElementById('current-date').textContent = today.toLocaleDateString('ru-RU');

    const workouts = {
        1: { title: "–í—ã—Ö–æ–¥–Ω–æ–π üåø", exercises: [] },
        0: { title: "–ù–æ–≥–∏ + –ü—Ä–µ—Å—Å", exercises: ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–í—ã–ø–∞–¥—ã", "–ü–æ–¥—ä–µ–º—ã –Ω–æ–≥", "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"] },
        2: { title: "–°–ø–∏–Ω–∞ + –¢—Ä–∏—Ü–µ–ø—Å", exercises: ["–û—Ç–∂–∏–º–∞–Ω–∏—è", "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–µ–π", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º", "–ü–ª–∞–Ω–∫–∞"] },
        3: { title: "–ì—Ä—É–¥—å + –ë–∏—Ü–µ–ø—Å + –ü—Ä–µ—Å—Å", exercises: ["–ñ–∏–º", "–°–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫", "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è", "–ü–æ–¥—ä–µ–º –∫–æ—Ä–ø—É—Å–∞"] },
        4: { title: "–ü–ª–µ—á–∏ + –ö–∞—Ä–¥–∏–æ", exercises: ["–ú–∞—Ö–∏", "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", "–ë–µ–≥ –Ω–∞ –º–µ—Å—Ç–µ", "–ë–µ—Ä–ø–∏"] },
        5: { title: "–Ø–≥–æ–¥–∏—Ü—ã + –ü—Ä–µ—Å—Å", exercises: ["–ú–æ—Å—Ç–∏–∫", "–ü–æ–¥—ä–µ–º—ã –Ω–æ–≥", "–ü–ª–∞–Ω–∫–∞", "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"] },
        6: { title: "–†–∞—Å—Ç—è–∂–∫–∞", exercises: ["–ù–∞–∫–ª–æ–Ω—ã", "–†–∞—Å—Ç—è–∂–∫–∞ —Å–ø–∏–Ω—ã", "–†–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥", "–†–∞—Å—Ç—è–∂–∫–∞ —Ä—É–∫"] }
    };

    const todayKey = today.getDay();
    const todayWorkout = workouts[todayKey];

    document.getElementById('workout-title').textContent = todayWorkout.title;

    // –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.getElementById('progress-container').style.display = 'none';
    document.getElementById('workout-screen').style.display = 'none';


    document.getElementById('start-btn').addEventListener('click', () => {
        document.getElementById('main-screen').style.display = 'none';
        document.getElementById('workout-screen').style.display = 'block';
        document.getElementById('progress-container').style.display = 'block'; // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        loadWorkout(todayWorkout);
    });

    document.getElementById('back-btn').addEventListener('click', () => {
        document.getElementById('workout-screen').style.display = 'none';
        document.getElementById('main-screen').style.display = 'block';
        document.getElementById('progress-container').style.display = 'none'; // –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    });

    document.getElementById('reset-btn').addEventListener('click', () => {
        localStorage.clear();
        updateCalendar();
    });

    function loadWorkout(workout) {
        const container = document.querySelector('.exercises');
        container.innerHTML = "";

        if (workout.exercises.length === 0) {
            container.innerHTML = "<p>–°–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö! üòä</p>";
            return;
        }

        let completedExercises = 0;
        workout.exercises.forEach((exercise, index) => {
            const card = document.createElement('div');
            card.classList.add('exercise-card');
            card.innerHTML = `<h3>${exercise}</h3><button class="complete-btn" data-index="${index}">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</button>`;
            container.appendChild(card);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
            const completedExercisesToday = JSON.parse(localStorage.getItem('completedExercises')) || [];
            if (completedExercisesToday.includes(index)) {
                card.classList.add('completed');
                card.querySelector('.complete-btn').disabled = true;
            }

            card.querySelector('.complete-btn').addEventListener('click', () => {
                if (!card.classList.contains('completed')) {
                    card.classList.add('completed');
                    completedExercises++;
                    updateProgressBar(completedExercises, workout.exercises.length);

                    const completedExercisesToday = JSON.parse(localStorage.getItem('completedExercises')) || [];
                    completedExercisesToday.push(index);
                    localStorage.setItem('completedExercises', JSON.stringify(completedExercisesToday));

                    card.querySelector('.complete-btn').disabled = true; // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π
                }
            });
        });
    }

    function updateProgressBar(completed, total) {
        const progress = (completed / total) * 100;
        document.getElementById('progress-bar').style.width = `${progress}%`;
        if (completed === total) {
            document.getElementById('completion-message').classList.remove('hidden');
            saveWorkoutCompletion();
        }
    }

    function saveWorkoutCompletion() {
        const completedDays = JSON.parse(localStorage.getItem('completedDays')) || [];
        const todayStr = today.toDateString();
        if (!completedDays.includes(todayStr)) {
            completedDays.push(todayStr);
            localStorage.setItem('completedDays', JSON.stringify(completedDays));
        }
        updateCalendar();
        updateTotalWorkouts();
    }

    function updateCalendar() {
        const calendar = document.getElementById('calendar');
        calendar.innerHTML = "";
        const daysInMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate();
        const completedDays = JSON.parse(localStorage.getItem('completedDays')) || [];

        for (let i = 1; i <= daysInMonth; i++) {
            const day = document.createElement('div');
            day.classList.add('day');
            day.textContent = i;
            if (completedDays.includes(new Date(today.getFullYear(), today.getMonth(), i).toDateString())) {
                day.classList.add('completed');
            }
            calendar.appendChild(day);
        }
    }

    function updateTotalWorkouts() {
        const completedDays = JSON.parse(localStorage.getItem('completedDays')) || [];
        document.getElementById('total-completed').textContent = completedDays.length;
    }

    updateCalendar();
    updateTotalWorkouts();
});
